##translate base on parameters

import json
import boto3
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)  # Set the desired log level

s3_client = boto3.client(service_name='s3')
translate = boto3.client('translate')

def translate_text(text, lang_code):
    result = translate.translate_text(
        Text=text,
        SourceLanguageCode='auto',
        TargetLanguageCode=lang_code
    )
    return result['TranslatedText']

def lambda_handler(event, context):
    try:
        # Parse the input JSON from the request body
        request_body = json.loads(event['body'])
        input_text = request_body.get('text')
        target_lang = request_body.get('lang_code', 'bn')

        if not input_text:
            raise ValueError('Missing "text" field in the request body.')

        # Translate the input text
        translated_text = translate_text(input_text, target_lang)
        logging.info(f'Translated text: {translated_text}')

        # Create the API response with only the translated text as the body
        response = {
            'statusCode': 200,
            'body': json.dumps(translated_text),
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Credentials': True, # To allow CORS
            }
        }

        return response

    except Exception as e:
        # In case of any error, return an error response
        error_response = {
            'statusCode': 400,
            'body': json.dumps({'error': str(e)}),
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*', # To allow CORS
                'Access-Control-Allow-Credentials': True,
            }
        }
        return error_response
